_NOOP = const(0x00)
_DIGIT0 = const(0x01)
_DIGIT1 = const(0x02)
_DIGIT2 = const(0x03)
_DIGIT3 = const(0x04)
_DIGIT4 = const(0x05)
_DIGIT5 = const(0x06)
_DIGIT6 = const(0x07)
_DIGIT7 = const(0x08)
_DECODEMODE = const(0x09)
_INTENSITY = const(0x0A)
_SCANLIMIT = const(0x0B)
_SHUTDOWN = const(0x0C)
_DISPLAYTEST = const(0x0F)

_FONT = 	   [[0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00],   \
				[0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00],   \
				[0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00],   \
				[0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00],   \
				[0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00],   \
				[0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00],   \
				[0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00],   \
				[0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00],   \
				[0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],   \
				[0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00],   \
				[0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00],   \
				[0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00],   \
				[0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00],   \
				[0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00],   \
				[0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00],   \
				[0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00],   \
				[0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00],   \
				[0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00],   \
				[0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00],   \
				[0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],   \
				[0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00],   \
				[0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00],   \
				[0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00],   \
				[0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00],   \
				[0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00],   \
				[0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00]]

_INTENSITYMIN = const(0x00)
_INTENSITYMAX = const(0x0F)

class LedMatrix8x8:
	def __init__(self, spi, load):
		self.spi = spi
		self.load = load
		self.buffer = bytearray(8)
		self.init()
	
	def write(self, register, data):
		self.load.high()								# Set load to high to begin
		self.spi.write(bytearray([register, data]))		# Write the register and data to MAX7219
		self.load.low()									# Set load to low to latch the data
		self.load.high()								# Set load to high 
	
	def init(self):
		self.load.init(self.load.OUT, True)				# Configure load pin as output
		self.write(_SCANLIMIT, 7)						# Set to scan all eight digits
		self.write(_DECODEMODE, 0)						# Set to 'no decode' for all digits
		self.write(_SHUTDOWN, 1)						# Select 'normal operation' i.e. no shutdown
		self.write(_DISPLAYTEST, 0)						# Select 'normal operation' i.e. no display test
		self.clear()									# Clear the display
		self.setbright(_INTENSITYMAX)					# Set maximum brightness
		
	def setbright(self, intensity):
		if not _INTENSITYMIN <= intensity <= _INTENSITYMAX:
			raise ValueError("Brightness out of range")
		self.write(_INTENSITY, intensity)				# Set brightness value
		
	def clear(self):
		for i in range(8):
			self.buffer[i] = 0x00						# Set buffer to all 0x00
	
	def fill(self):
		for i in range(8):
			self.buffer[i] = 0xFF						# Set buffer to all 0xFF
	
	def print(self, letter):
		if letter == ' ':
			self.clear()
			return
		for i in range(8):
			self.buffer[7-i] = _FONT[ord(letter) - 65][i]	# Convert letter to Font index and copy. As implemented only works for uppercase letters

	def checker(self):
		for i in range(8):
			self.buffer[i] = 0xAA>>(i%2)
		
	def show(self):
		for i in range(8):
			self.write(_DIGIT0 + i, self.buffer[i])
			
	